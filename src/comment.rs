use ej_config::ej_board_config::EjBoardConfigApi;
use tracing::warn;

use crate::scene::Scene;

fn format_cell(value: i32, delta: i32) -> String {
    if delta == 0 {
        format!(" {} |", value)
    } else {
        format!(" {} ({:+}) |", value, delta)
    }
}
fn format_table(results: &Vec<Scene>, delta: &Vec<Scene>) -> String {
    let mut table = String::new();
    table += "| Scene Name | Avg CPU (%) | Avg FPS | Avg Time (ms) | Render Time (ms) | Flush Time (ms) |\n";
    table += "|------------|-------------|---------|---------------|------------------|-----------------|\n";

    for (new_result, delta_result) in results.iter().zip(delta) {
        table += &format!("| {} |", new_result.scene_name);
        table += &format_cell(new_result.avg_cpu, delta_result.avg_cpu);
        table += &format_cell(new_result.avg_fps, delta_result.avg_fps);
        table += &format_cell(new_result.avg_time, delta_result.avg_time);
        table += &format_cell(new_result.render_time, delta_result.render_time);
        table += &format_cell(new_result.flush_time, delta_result.flush_time);
        table += "\n";
    }
    table
}
pub fn generate_comment(results: &Vec<(EjBoardConfigApi, Vec<Scene>, Vec<Scene>)>) -> String {
    let mut comment = String::new();
    comment += "Hi :wave:, thank you for your PR!\n\n";
    comment += "We've run some performance benchmarks. Here are the results:\n\n";

    for (board_config, new_result, delta) in results {
        let all_scene_avg = new_result
            .iter()
            .rfind(|scene| scene.scene_name == "All scenes avg.");
        let delta_all_scene_avg = delta
            .iter()
            .rfind(|scene| scene.scene_name == "All scenes avg.");
        comment += &format!("#### {}\n\n", board_config);

        let hide_full_table_in_details = match (all_scene_avg, delta_all_scene_avg) {
            (Some(all_scene_avg), Some(delta_all_scene_avg)) => {
                let all_scene_avg = vec![all_scene_avg.clone()];
                let delta_all_scene_avg = vec![delta_all_scene_avg.clone()];
                comment += &format_table(&all_scene_avg, &delta_all_scene_avg);
                true
            }
            (_, _) => {
                warn!("Coulnd't find 'All scenes avg.' entry for {}", board_config);
                false
            }
        };

        if hide_full_table_in_details {
            comment += "\n<details>";
            comment += "\n<summary>";
            comment += "\nDetailed Results Per Scene";
            comment += "\n</summary>\n\n";
        }
        comment += &format_table(new_result, delta);
        if hide_full_table_in_details {
            comment += "\n\n</details>\n\n";
        }
    }

    comment += "\n\n---\n\n";
    comment += ":robot: This comment was automatically generated by a bot.";
    comment
}

#[cfg(test)]
mod tests {
    use super::*;
    use uuid::Uuid;

    // Helper function to create a test config
    fn create_config(name: &str, tags: Vec<&str>) -> EjBoardConfigApi {
        EjBoardConfigApi {
            id: Uuid::parse_str("550e8400-e29b-41d4-a716-446655440000").unwrap(),
            name: name.to_string(),
            tags: tags.into_iter().map(|s| s.to_string()).collect(),
        }
    }

    #[test]
    fn test_format_cell() {
        assert_eq!(format_cell(65, 5), " 65 (+5) |");
        assert_eq!(format_cell(19, -3), " 19 (-3) |");
        assert_eq!(format_cell(0, 0), " 0 |");
    }

    #[test]
    fn test_format_table() {
        let scenes = vec![
            Scene {
                scene_name: "Single rectangle".to_string(),
                avg_cpu: 65,
                avg_fps: 19,
                avg_time: 166,
                render_time: 0,
                flush_time: 166,
            },
            Scene {
                scene_name: "Widgets demo".to_string(),
                avg_cpu: 5,
                avg_fps: 28,
                avg_time: 0,
                render_time: 0,
                flush_time: 0,
            },
        ];
        let deltas = vec![
            Scene {
                scene_name: "Single rectangle".to_string(),
                avg_cpu: 5,
                avg_fps: -3,
                avg_time: 20,
                render_time: 0,
                flush_time: 20,
            },
            Scene {
                scene_name: "Widgets demo".to_string(),
                avg_cpu: 1,
                avg_fps: -1,
                avg_time: 0,
                render_time: 0,
                flush_time: 0,
            },
        ];

        let expected = "| Scene Name | Avg CPU (%) | Avg FPS | Avg Time (ms) | Render Time (ms) | Flush Time (ms) |\n\
            |------------|-------------|---------|---------------|------------------|-----------------|\n\
            | Single rectangle | 65 (+5) | 19 (-3) | 166 (+20) | 0 | 166 (+20) |\n\
            | Widgets demo | 5 (+1) | 28 (-1) | 0 | 0 | 0 |\n";

        let actual = format_table(&scenes, &deltas);
        assert_eq!(actual, expected);
    }

    #[test]
    fn test_generate_comment_with_all_scenes_avg_complete() {
        let config = create_config("STM32F746 Discovery", vec!["embedded", "cortex-m7"]);
        let scenes = vec![
            Scene {
                scene_name: "Single rectangle".to_string(),
                avg_cpu: 65,
                avg_fps: 19,
                avg_time: 166,
                render_time: 10,
                flush_time: 166,
            },
            Scene {
                scene_name: "Widgets demo".to_string(),
                avg_cpu: 5,
                avg_fps: 28,
                avg_time: 0,
                render_time: 20,
                flush_time: 0,
            },
            Scene {
                scene_name: "All scenes avg.".to_string(),
                avg_cpu: 4,
                avg_fps: 28,
                avg_time: 10,
                render_time: 30,
                flush_time: 10,
            },
        ];
        let deltas = vec![
            Scene {
                scene_name: "Single rectangle".to_string(),
                avg_cpu: 5,
                avg_fps: 30,
                avg_time: 20,
                render_time: 0,
                flush_time: 20,
            },
            Scene {
                scene_name: "Widgets demo".to_string(),
                avg_cpu: 1,
                avg_fps: -1,
                avg_time: 0,
                render_time: 0,
                flush_time: 0,
            },
            Scene {
                scene_name: "All scenes avg.".to_string(),
                avg_cpu: 2,
                avg_fps: 1,
                avg_time: 5,
                render_time: 0,
                flush_time: 5,
            },
        ];

        let results = vec![(config, scenes, deltas)];
        let comment = generate_comment(&results);

        let expected = "Hi :wave:, thank you for your PR!\n\n\
            We've run some performance benchmarks. Here are the results:\n\n\
            #### 550e8400-e29b-41d4-a716-446655440000 - STM32F746 Discovery [embedded,cortex-m7]\n\n\
            | Scene Name | Avg CPU (%) | Avg FPS | Avg Time (ms) | Render Time (ms) | Flush Time (ms) |\n\
            |------------|-------------|---------|---------------|------------------|-----------------|\n\
            | All scenes avg. | 4 (+2) | 28 (+1) | 10 (+5) | 30 | 10 (+5) |\n\
            \n<details>\n\
            <summary>\n\
            Detailed Results Per Scene\n\
            </summary>\n\n\
            | Scene Name | Avg CPU (%) | Avg FPS | Avg Time (ms) | Render Time (ms) | Flush Time (ms) |\n\
            |------------|-------------|---------|---------------|------------------|-----------------|\n\
            | Single rectangle | 65 (+5) | 19 (+30) | 166 (+20) | 10 | 166 (+20) |\n\
            | Widgets demo | 5 (+1) | 28 (-1) | 0 | 20 | 0 |\n\
            | All scenes avg. | 4 (+2) | 28 (+1) | 10 (+5) | 30 | 10 (+5) |\n\
            \n\n</details>\n\n\
            \n\n---\n\n\
            :robot: This comment was automatically generated by a bot.";

        assert_eq!(comment, expected);
    }

    #[test]
    fn test_generate_comment_without_all_scenes_avg_complete() {
        let config = create_config("STM32F746 Discovery", vec!["embedded"]);
        let scenes = vec![
            Scene {
                scene_name: "Single rectangle".to_string(),
                avg_cpu: 65,
                avg_fps: 19,
                avg_time: 166,
                render_time: 0,
                flush_time: 166,
            },
            Scene {
                scene_name: "Widgets demo".to_string(),
                avg_cpu: 5,
                avg_fps: 28,
                avg_time: 0,
                render_time: 0,
                flush_time: 0,
            },
        ];
        let deltas = vec![
            Scene {
                scene_name: "Single rectangle".to_string(),
                avg_cpu: 5,
                avg_fps: -3,
                avg_time: 20,
                render_time: 0,
                flush_time: 20,
            },
            Scene {
                scene_name: "Widgets demo".to_string(),
                avg_cpu: 0,
                avg_fps: 0,
                avg_time: 0,
                render_time: 0,
                flush_time: 0,
            },
        ];

        let results = vec![(config, scenes, deltas)];
        let comment = generate_comment(&results);

        let expected = "Hi :wave:, thank you for your PR!\n\n\
            We've run some performance benchmarks. Here are the results:\n\n\
            #### 550e8400-e29b-41d4-a716-446655440000 - STM32F746 Discovery [embedded]\n\n\
            | Scene Name | Avg CPU (%) | Avg FPS | Avg Time (ms) | Render Time (ms) | Flush Time (ms) |\n\
            |------------|-------------|---------|---------------|------------------|-----------------|\n\
            | Single rectangle | 65 (+5) | 19 (-3) | 166 (+20) | 0 | 166 (+20) |\n\
            | Widgets demo | 5 | 28 | 0 | 0 | 0 |\n\
            \n\n---\n\n\
            :robot: This comment was automatically generated by a bot.";

        assert_eq!(comment, expected);
    }

    #[test]
    fn test_generate_comment_multiple_configs_complete() {
        let config1 = create_config("Board A", vec!["fast"]);
        let config2 = create_config("Board B", vec!["slow"]);

        let scenes1 = vec![Scene {
            scene_name: "Test scene".to_string(),
            avg_cpu: 10,
            avg_fps: 30,
            avg_time: 5,
            render_time: 2,
            flush_time: 3,
        }];
        let deltas1 = vec![Scene {
            scene_name: "Test scene".to_string(),
            avg_cpu: 1,
            avg_fps: -1,
            avg_time: 0,
            render_time: 0,
            flush_time: 0,
        }];

        let scenes2 = vec![Scene {
            scene_name: "Test scene".to_string(),
            avg_cpu: 20,
            avg_fps: 25,
            avg_time: 10,
            render_time: 5,
            flush_time: 5,
        }];
        let deltas2 = vec![Scene {
            scene_name: "Test scene".to_string(),
            avg_cpu: -2,
            avg_fps: 2,
            avg_time: 1,
            render_time: 0,
            flush_time: 1,
        }];

        let results = vec![(config1, scenes1, deltas1), (config2, scenes2, deltas2)];
        let comment = generate_comment(&results);

        let expected = "Hi :wave:, thank you for your PR!\n\n\
            We've run some performance benchmarks. Here are the results:\n\n\
            #### 550e8400-e29b-41d4-a716-446655440000 - Board A [fast]\n\n\
            | Scene Name | Avg CPU (%) | Avg FPS | Avg Time (ms) | Render Time (ms) | Flush Time (ms) |\n\
            |------------|-------------|---------|---------------|------------------|-----------------|\n\
            | Test scene | 10 (+1) | 30 (-1) | 5 | 2 | 3 |\n\
            #### 550e8400-e29b-41d4-a716-446655440000 - Board B [slow]\n\n\
            | Scene Name | Avg CPU (%) | Avg FPS | Avg Time (ms) | Render Time (ms) | Flush Time (ms) |\n\
            |------------|-------------|---------|---------------|------------------|-----------------|\n\
            | Test scene | 20 (-2) | 25 (+2) | 10 (+1) | 5 | 5 (+1) |\n\
            \n\n---\n\n\
            :robot: This comment was automatically generated by a bot.";

        assert_eq!(comment, expected);
    }

    #[test]
    fn test_ej_board_config_display_complete() {
        let config = EjBoardConfigApi {
            id: Uuid::parse_str("550e8400-e29b-41d4-a716-446655440000").unwrap(),
            name: "STM32F746 Discovery".to_string(),
            tags: vec!["embedded".to_string(), "cortex-m7".to_string()],
        };

        let expected =
            "550e8400-e29b-41d4-a716-446655440000 - STM32F746 Discovery [embedded,cortex-m7]";
        assert_eq!(format!("{}", config), expected);
    }
}
